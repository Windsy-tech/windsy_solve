import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:fpdart/fpdart.dart';
import 'package:windsy_solve/core/handler/failure.dart';
import 'package:windsy_solve/core/providers/firebase_providers.dart';
import 'package:windsy_solve/core/type_defs.dart';
import 'package:windsy_solve/models/inspection/checklist_model.dart';
import 'package:windsy_solve/models/reports/reports_model.dart';

final reportsRepositoryProvider = Provider<ReportsRepository>((ref) {
  final firestore = ref.watch(firestoreProvider);
  return ReportsRepository(firestore: firestore);
});

class ReportsRepository {
  final FirebaseFirestore _firestore;

  ReportsRepository({required FirebaseFirestore firestore})
      : _firestore = firestore;

  CollectionReference get _companies => _firestore.collection('companies');

  //Save NC report
  FutureEither<String> saveNCReport(
      ReportModel report, String companyId) async {
    try {
      await _companies
          .doc(companyId)
          .collection('nc-reports')
          .doc(report.id)
          .set(report.toMap());
      return right(report.id);
    } on FirebaseException catch (e) {
      throw e.message!;
    } catch (e) {
      return left(Failure(message: e.toString()));
    }
  }

  FutureEither<String> deleteReport(
    String companyId,
    String reportId,
    String reportType,
  ) async {
    try {
      if (reportType == 'nc') {
        await _companies
            .doc(companyId)
            .collection('nc-reports')
            .doc(reportId)
            .delete();
      } else {
        await _companies
            .doc(companyId)
            .collection('inspections-reports')
            .doc(reportId)
            .delete();
      }
      return right('Report deleted successfully!');
    } on FirebaseException catch (e) {
      throw e.message!;
    } catch (e) {
      return left(Failure(message: e.toString()));
    }
  }

  //Get NC reports by company id
  Stream<List<ReportModel>> getNCReports(String companyId) {
    return _companies
        .doc(companyId)
        .collection('nc-reports')
        .orderBy('createdAt', descending: true)
        .snapshots()
        .map((event) {
      return event.docs.map((e) {
        return ReportModel.fromMap(e.data());
      }).toList();
    });
  }

  //Get NC Reports Generated By User
  Stream<List<ReportModel>> getNCReportsCreatedByUser(
      String companyId, String userId) {
    return _companies
        .doc(companyId)
        .collection('nc-reports')
        .where('createdBy', isEqualTo: userId)
        .snapshots()
        .map((event) {
      return event.docs.map((e) {
        return ReportModel.fromMap(e.data());
      }).toList();
    });
  }

  //Save Inspection report
  FutureEither<String> saveInspectionReport(
      ReportModel report, String companyId) async {
    try {
      await _companies
          .doc(companyId)
          .collection('inspections-reports')
          .doc(report.id)
          .set(report.toMap());
      return right(report.id);
    } on FirebaseException catch (e) {
      throw e.message!;
    } catch (e) {
      return left(Failure(message: e.toString()));
    }
  }

  //Get Inspection reports by company id
  Stream<List<ReportModel>> getInspectionReports(String companyId) {
    return _companies
        .doc(companyId)
        .collection('inspections-reports')
        .snapshots()
        .map((event) {
      return event.docs.map((e) {
        return ReportModel.fromMap(e.data());
      }).toList();
    });
  }

  //Get Inspection  Reports Generated By User
  Stream<List<ReportModel>> getInspectionReportsCreatedByUser(
    String companyId,
    String userId,
  ) {
    return _companies
        .doc(companyId)
        .collection('inspections-reports')
        .where('createdBy', isEqualTo: userId)
        .snapshots()
        .map((event) {
      return event.docs.map((e) {
        return ReportModel.fromMap(e.data());
      }).toList();
    });
  }

  Future<int> getNCReportVersion(String associatedTo, String companyId) async {
    final snapshot = await _companies
        .doc(companyId)
        .collection('nc-reports')
        .where('associatedTo', isEqualTo: associatedTo)
        .get();
    return snapshot.docs.length;
  }

  Future<int> getInspectionReportVersion(
      String associatedTo, String companyId) async {
    final snapshot = await _companies
        .doc(companyId)
        .collection('inspections-reports')
        .where('associatedTo', isEqualTo: associatedTo)
        .get();
    return snapshot.docs.length;
  }

  Future<List<CheckListModel>> getCheckLists(
    String companyId,
    String inspectionId,
    String sectionName,
  ) async {
    try {
      List<CheckListModel> checkLists = [];
      await _companies
          .doc(companyId)
          .collection('inspections')
          .doc(inspectionId)
          .collection(sectionName)
          .get()
          .then((value) {
        checkLists =
            value.docs.map((e) => CheckListModel.fromMap(e.data())).toList();
      });
      return checkLists;
    } on FirebaseException catch (e) {
      throw e.message!;
    } catch (e) {
      throw e.toString();
    }
  }
}
